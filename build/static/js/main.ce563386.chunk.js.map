{"version":3,"sources":["storeContext.js","Fetch.js","PrintJokes.js","App.js","reportWebVitals.js","index.js"],"names":["StoreContext","createContext","StoreProvider","children","useState","items","state","setState","Provider","value","Fetch","count","setCount","chosenCategory","setChosenCategory","firstname","setFirstname","lastname","setLastname","catecories","setCategories","useContext","setStore","useEffect","className","onChange","e","kat","target","map","x","i","type","alt","validateValue","placeholder","onClick","base_url","lastPArt","limitcat","fetch","then","resp","json","fetchJokes","window","location","reload","PrintJokes","store","j","Object","values","firstUpdate","setFirstUpdate","length","element","y","joke","App","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ce563386.chunk.js","sourcesContent":["import React, { createContext, useState } from \"react\";\r\n\r\nconst StoreContext = createContext([[],() => {}]);\r\nconst StoreProvider = ({ children }) => {\r\n  const [state, setState] = useState({\r\n    items: [children]\r\n  });\r\n  return (\r\n    <StoreContext.Provider value={[state, setState]}>\r\n      {children}\r\n    </StoreContext.Provider>\r\n  );\r\n};\r\n\r\nexport { StoreContext, StoreProvider };\r\n","import React, { useEffect, useState, useContext } from 'react'\r\nimport { StoreContext } from \"./storeContext\";\r\nimport './Fetch.css'\r\n\r\n/**\r\n * Haetaan haluttu määrä vitsejä apista ja tallennetaan ne storeContexiin \r\n * kategoriat on tehty kovakoodauksella mikäli en muistanut/jaksanut hakea niitä\r\n */\r\nconst Fetch = () => {\r\n  const minJokeCount = 1;\r\n  const maxJokeCount = 10;\r\n  const defaultJokeValueCount = 10;\r\n  const [count, setCount] = useState(defaultJokeValueCount);\r\n  const [chosenCategory, setChosenCategory] = useState(\"kaikki\", \"explicit\", \"nerdy\")\r\n  const [firstname, setFirstname] = useState(\"Chuck\")\r\n  const [lastname, setLastname] = useState(\"Norris\")\r\n  const [catecories, setCategories] = useState([])\r\n  const [store, setStore] = useContext(StoreContext);\r\n  useEffect(() => {\r\n    setCategories([\"kaikki kategoriat\", \"explicit\", \"nerdy\"])\r\n  }, []);\r\n\r\n  const fetchJokes = () => {\r\n    let base_url = \"https://api.icndb.com/\"\r\n    let lastPArt = `jokes/random/${count}?firstName=${firstname}&lastName=${lastname}&escape=javascript`\r\n    let limitcat = `&limitTo=[${chosenCategory}]`\r\n    let finalUrl = base_url + lastPArt\r\n    if (chosenCategory === \"kaikki\") {\r\n      finalUrl = base_url + lastPArt\r\n    }\r\n    else {\r\n      finalUrl = base_url + lastPArt + limitcat\r\n    }\r\n    fetch(finalUrl)\r\n      .then((resp) => {\r\n        return resp.json();\r\n      })\r\n      .then((json) => {\r\n        setStore(json.value)\r\n      });\r\n  };\r\n\r\n  const validateValue = (e) => {\r\n    if (e >= minJokeCount && e <= maxJokeCount) {\r\n      setCount(e)\r\n    }\r\n  }\r\n\r\n  const kat = (e) => {\r\n    setChosenCategory(e)\r\n  }\r\n  // päivitetään sivu jotta printjokes komponentin laskuri nollautuu\r\n  // olisi pitäny tehä useContexilla nollaus, mut en oo ainakaa vielä tehny näköjää\r\n  const refreshPage = () => {\r\n    window.location.reload();\r\n  }\r\n\r\n  return (\r\n    <div className=\"jokeBox\">\r\n      <div className=\"labels\">\r\n        <label>Kategoriat</label>\r\n        <select className=\"sel\" onChange={e => kat(e.target.value)}>{catecories.map((x, i) => <option className=\"sel\" key={i}>{x}</option>)}</select>\r\n      </div>\r\n\r\n      <div className=\"labels\">\r\n        <label>Vitsien määrä</label>\r\n        <input type=\"number\" alt=\"count\" value={count} onChange={e => validateValue(e.target.value)} />\r\n      </div>\r\n\r\n      <div className=\"labels\">\r\n        <label>Etunimi</label>\r\n        <input type=\"text\" placeholder=\"etunimi\" value={firstname} onChange={e => setFirstname(e.target.value)}  ></input>\r\n      </div>\r\n\r\n      <div className=\"labels\">\r\n        <label>Sukunimi</label>\r\n        <input type=\"text\" placeholder=\"sukunimi\" value={lastname} onChange={e => setLastname(e.target.value)}  ></input>\r\n      </div>\r\n\r\n      <div className=\"labels\">\r\n        <button onClick={() => fetchJokes()}>Hae vitsit</button>\r\n      </div>\r\n\r\n      <div className=\"labels\">\r\n        <button onClick={() => refreshPage()}>Tyhjennä</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Fetch;\r\n","import { StoreContext } from \"./storeContext\";\r\nimport React, { useEffect, useContext, useState} from \"react\";\r\nimport './PrintJokes.css';\r\n/**\r\n * Tulostetaan useContextista saatu lista \r\n * eka count päivitys on ehdollistettu\r\n * koska count value on alussa (1), jota en tietenkään halunnut\r\n * varmaan olis löytyny joku järkevämpikin tapa tehdä tää\r\n */\r\n\r\nconst PrintJokes = () => {\r\n  const [store, setStore] = useContext(StoreContext);\r\n  const [count, setCount] = useState(0);\r\n  const j = Object.values(store);\r\n  const [firstUpdate, setFirstUpdate] = useState(true)\r\n  \r\n  useEffect(() => {\r\n    if (firstUpdate) {\r\n      setFirstUpdate(false)\r\n    }\r\n    else {\r\n      setCount((+j.length + +count))\r\n    }\r\n  }, [store])\r\n  const print = () => {\r\n    return (\r\n      <div>\r\n        {\r\n          j.map((element, i, y) => {\r\n            return <p className=\"jokes\" key={i}>{i + 1}{\". \"}{element.joke}{\"\\n\"}</p>\r\n          })\r\n        }\r\n      </div>\r\n    )\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3 className=\"counter\">{\"Vitsejä näytetty yhteensä: \"+count+\" kpl.\"}</h3>\r\n      {\r\n        (count === 0) ?  <h2 alt=\"emptyList\">{\"Ei vitsejä näytettäväksi\"}</h2> : print() \r\n      }\r\n    </div>\r\n  )\r\n}\r\nexport default PrintJokes;","import './App.css';\nimport Fetch from './Fetch';\nimport PrintJokes from './PrintJokes';\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div id=\"main\">\n      <h1 className=\"header\"> Chuck Norris</h1>\n      <p className=\"intro\">\n        Chuck Norris vitsigeneraattori. Voit valita halutun kategorian sekä vitsien määrän (1-10), sekä antaa haluttu etu- ja sukunimi.\n      </p>\n      <Fetch />\n      <PrintJokes />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nimport reportWebVitals from './reportWebVitals';\nimport { StoreProvider } from './storeContext';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    \n    <StoreProvider>\n    <App />\n    </StoreProvider>\n    \n    \n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}