{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Kurssit\\\\2020\\\\reaktiivinen_selainohjelmointi\\\\lopputyo\\\\src\\\\Fetch.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from 'react';\nconst JokeList = /*#__PURE__*/createContext([]);\n{\n  console.log;\n}\n\nconst Fetch = ({\n  children\n}) => {\n  _s();\n\n  const defaulJokeValue = 10;\n  const [maara, setMaara] = useState(defaulJokeValue);\n  const [vitsit, setvitsit] = useState([]);\n  const [jokeCounter, setCount] = useState(maara);\n  const [valittukategoria, setValittukategoria] = useState(\"kaikki\", \"explicit\", \"nerdy\");\n  const [etunimi, setEtunnimi] = useState(\"\");\n  const [sukunimi, setSukunimi] = useState(\"\");\n  const [kategoriat, setKategoriat] = useState([]);\n  useEffect(() => {\n    //hae kategoriat jsonilla\n    setKategoriat([\"kaikki\", \"explicit\", \"nerdy\"]);\n  }, []);\n\n  const lataa_vitsit = () => {\n    let base_url = \"http://api.icndb.com/\";\n    let lastPArt = `jokes/random/${maara}?firstName=${etunimi}&lastName=${sukunimi}`; //console.log(\"VAlittu kategoria----- \" + valittukategoria)\n\n    let limitcat = `&limitTo=[${valittukategoria}]`;\n    let id = `jokes/23`;\n    let finalUrl = base_url + lastPArt;\n\n    if (valittukategoria == \"kaikki\") {\n      finalUrl = base_url + lastPArt;\n    } else {\n      finalUrl = base_url + lastPArt + limitcat;\n    } //console.log(\"Haku urli\" + finalUrl)\n\n\n    fetch(finalUrl).then(resp => {\n      return resp.json();\n    }).then(json => {\n      //console.log(json)\n      setvitsit(json.value);\n    });\n  };\n\n  const validateValue = e => {\n    if (e >= 1 && e <= 10) {\n      setCount(jokeCounter => jokeCounter + parseInt(e));\n      setMaara(e); //console.log(jokeCounter)\n    }\n  };\n\n  const kat = e => {\n    setValittukategoria(e);\n  };\n\n  const Print = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 20,\n        margin: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        style: {\n          padding: 10,\n          margin: 20\n        },\n        onChange: e => kat(e.target.value),\n        children: kategoriat.map(x => /*#__PURE__*/_jsxDEV(\"option\", {\n          children: x\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 112\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), \";\", /*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          padding: 10,\n          margin: 20\n        },\n        type: \"number\",\n        name: \"quantity\",\n        value: maara,\n        onChange: e => validateValue(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          padding: 10,\n          margin: 20\n        },\n        type: \"text\",\n        placeholder: \"etunimi\",\n        value: etunimi,\n        onChange: e => setEtunnimi(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        style: {\n          padding: 10,\n          margin: 20\n        },\n        type: \"text\",\n        placeholder: \"sukunimi\",\n        value: sukunimi,\n        onChange: e => setSukunimi(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          padding: 10,\n          margin: 20\n        },\n        onClick: () => lataa_vitsit(),\n        children: \"Fetch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: valittukategoria\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Vitsej\\xE4 on haettu kaikkiaan: \", jokeCounter]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(JokeList.Provider, {\n    value: vitsit[\"joke\"],\n    children: [/*#__PURE__*/_jsxDEV(Print, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Fetch, \"DeuDsiq0WFdR/VQdTbUfiSkkZcA=\");\n\n_c = Fetch;\nexport { JokeList, Fetch };\n\nvar _c;\n\n$RefreshReg$(_c, \"Fetch\");","map":{"version":3,"sources":["C:/Kurssit/2020/reaktiivinen_selainohjelmointi/lopputyo/src/Fetch.js"],"names":["React","createContext","useEffect","useState","JokeList","console","log","Fetch","children","defaulJokeValue","maara","setMaara","vitsit","setvitsit","jokeCounter","setCount","valittukategoria","setValittukategoria","etunimi","setEtunnimi","sukunimi","setSukunimi","kategoriat","setKategoriat","lataa_vitsit","base_url","lastPArt","limitcat","id","finalUrl","fetch","then","resp","json","value","validateValue","e","parseInt","kat","Print","padding","margin","target","map","x"],"mappings":"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","sourcesContent":["import React, { createContext, useEffect, useState } from 'react'\r\nconst JokeList = createContext([])\r\n{console.log}\r\nconst Fetch = ({ children }) => {\r\n  const defaulJokeValue = 10;\r\n  const [maara, setMaara] = useState(defaulJokeValue);\r\n  const [vitsit, setvitsit] = useState([]);\r\n  const [jokeCounter, setCount] = useState(maara)\r\n  const [valittukategoria, setValittukategoria] = useState(\"kaikki\", \"explicit\", \"nerdy\")\r\n  const [etunimi, setEtunnimi] = useState(\"\")\r\n  const [sukunimi, setSukunimi] = useState(\"\")\r\n  const [kategoriat, setKategoriat] = useState([])\r\n  \r\n  useEffect(() => {\r\n    //hae kategoriat jsonilla\r\n\r\n    setKategoriat([\"kaikki\", \"explicit\", \"nerdy\"])\r\n\r\n  }, []);\r\n\r\n  const lataa_vitsit = () => {\r\n\r\n    let base_url = \"http://api.icndb.com/\"\r\n    let lastPArt = `jokes/random/${maara}?firstName=${etunimi}&lastName=${sukunimi}`\r\n    //console.log(\"VAlittu kategoria----- \" + valittukategoria)\r\n    let limitcat = `&limitTo=[${valittukategoria}]`\r\n    let id = `jokes/23`\r\n    let finalUrl = base_url + lastPArt\r\n\r\n    if (valittukategoria == \"kaikki\") {\r\n      finalUrl = base_url + lastPArt\r\n    }\r\n    else {\r\n      finalUrl = base_url + lastPArt + limitcat\r\n    }\r\n    //console.log(\"Haku urli\" + finalUrl)\r\n    fetch(finalUrl)\r\n      .then((resp) => {\r\n        return resp.json();\r\n      })\r\n      .then((json) => {\r\n        //console.log(json)\r\n        setvitsit(json.value);\r\n\r\n      });\r\n  };\r\n\r\n\r\n\r\n  const validateValue = (e) => {\r\n    if (e >= 1 && e <= 10) {\r\n      setCount(jokeCounter => jokeCounter + parseInt(e))\r\n      setMaara(e)\r\n      //console.log(jokeCounter)\r\n    }\r\n  }\r\n  const kat = (e) => {\r\n\r\n    setValittukategoria(e)\r\n  }\r\n  const Print = () => {\r\n    return (\r\n      <div style={{ padding: 20, margin: 20 }}>\r\n        {\r\n\r\n\r\n        }\r\n\r\n        <select style={{ padding: 10, margin: 20 }} onChange={e => kat(e.target.value)}>{kategoriat.map((x) => <option>{x}</option>)}</select>;\r\n\r\n        {\r\n          //<select onChange={e=> kat(e.target.value)}>{kategoriat.map((x) => <option>{x}</option>)}</select>;\r\n          //console.log(etunimi+\" \" + sukunimi)\r\n        }\r\n        {\r\n          //console.log(\"kategoriat\"+kategoriat)\r\n        }\r\n\r\n        <input style={{ padding: 10, margin: 20 }} type=\"number\" name=\"quantity\" value={maara} onChange={e => validateValue(e.target.value)} />\r\n        <input style={{ padding: 10, margin: 20 }} type=\"text\" placeholder=\"etunimi\" value={etunimi} onChange={e => setEtunnimi(e.target.value)}  ></input>\r\n        <input style={{ padding: 10, margin: 20 }} type=\"text\" placeholder=\"sukunimi\" value={sukunimi} onChange={e => setSukunimi(e.target.value)}  ></input>\r\n        <button style={{ padding: 10, margin: 20 }} onClick={() => lataa_vitsit()}>Fetch</button>\r\n        <p>{valittukategoria}</p>\r\n        {\r\n          //console.log(vitsit)\r\n        }\r\n        \r\n        <div>\r\n\r\n          {/*\r\n        \r\n        \r\n        \r\n        \r\n      \r\n        <h3>vitsit</h3>\r\n\r\n        <p>{JSON.stringify(vitsit.keys, [\"joke\"], 1)}</p>\r\n\r\n        \r\n\r\n\r\n          //console.log(vitsit[0][\"joke\"])\r\n        \r\n        \r\n          vitsit.map((element, i) => {\r\n            //console.log(element[\"joke\"])\r\n            return <li key={i}>{i + 1}{\". \"}{element[\"joke\"]}{\" ---------------ja kategory on testissä   \"}{element[\"categories\"]}{\"\\n\"}</li>\r\n          })\r\n        */\r\n          }\r\n\r\n          <p>Vitsejä on haettu kaikkiaan: {jokeCounter}</p>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    )\r\n  }\r\n  return (\r\n    \r\n    <JokeList.Provider value={vitsit[\"joke\"]}>\r\n      <Print/>\r\n      { children }\r\n    </JokeList.Provider>\r\n\r\n  );\r\n}\r\n\r\nexport { JokeList, Fetch };\r\n"]},"metadata":{},"sourceType":"module"}